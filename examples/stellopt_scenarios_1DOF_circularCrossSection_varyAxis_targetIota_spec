#!/usr/bin/env python3

import numpy as np
import logging
from simsopt import Spec, SurfaceGarabedian, LeastSquaresProblem, \
    least_squares_serial_solve

"""
This script implements the "1DOF_circularCrossSection_varyAxis_targetIota"
example from
https://github.com/landreman/stellopt_scenarios

This example demonstrates optimizing a surface shape using the
Garabedian representation instead of VMEC's RBC/ZBS representation.
This optimization problem has one independent variable, the Garabedian
Delta_{m=1, n=-1} coefficient, representing the helical excursion of
the magnetic axis. The objective function is (iota - iota_target)^2,
where iota is measured on the magnetic axis.

Details of the optimum and a plot of the objective function landscape
can be found here:
https://github.com/landreman/stellopt_scenarios/tree/master/1DOF_circularCrossSection_varyAxis_targetIota
"""

logging.basicConfig(level=logging.DEBUG)

# Create a Spec object:
equil = Spec('1DOF_Garabedian.sp')
# If the xspec executable is not in PATH, the path to the executable
# should be specified as in the following line:
# equil = Spec('1DOF_Garabedian.sp', exe='/Users/mattland/SPEC/xspec')

# We will optimize in the space of Garabedian coefficients rather than
# RBC/ZBS coefficients. To do this, we convert the boundary to the
# Garabedian representation:
surf = equil.boundary.to_Garabedian()
equil.boundary = surf

# VMEC parameters are all fixed by default, while surface parameters
# are all non-fixed by default.  You can choose which parameters are
# optimized by setting their 'fixed' attributes.
surf.all_fixed()
surf.set_fixed('Delta(1,-1)', False)

# Each function we want in the objective function is then equipped
# with a shift and weight, to become a term in a least-squares
# objective function.  A list of terms are combined to form a
# nonlinear-least-squares problem.
desired_iota = 0.41 # Sign was + for VMEC
prob = LeastSquaresProblem([(equil.iota, desired_iota, 1)])

# Solve the minimization problem. We can choose whether to use a
# derivative-free or derivative-based algorithm.
least_squares_serial_solve(prob, grad=False)

print("At the optimum,")
print(" Delta(m=1,n=-1) = ", surf.get_Delta(1, -1))
print(" iota = ", equil.iota())
print(" objective function = ", prob.objective())

assert np.abs(surf.get_Delta(1, -1) - 0.08575) < 1.0e-4
assert np.abs(equil.iota() - desired_iota) < 1.0e-5
assert prob.objective() < 1.0e-15
