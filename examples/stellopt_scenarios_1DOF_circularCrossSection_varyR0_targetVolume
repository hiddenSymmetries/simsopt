#!/usr/bin/env python3

import sys
sys.path.append('..')
import numpy as np
from simsopt import Vmec, LeastSquaresTerm, LeastSquaresProblem

"""
This script implements the "1DOF_circularCrossSection_varyR0_targetVolume"
example from
https://github.com/landreman/stellopt_scenarios

This optimization problem has one independent variable, representing
the mean major radius. The problem also has one objective: the plasma
volume. There is not actually any need to run an equilibrium code like
VMEC since the objective function can be computed directly from the
boundary shape. But this problem is a fast way to test the
optimization infrastructure with VMEC.

Details of the optimum and a plot of the objective function landscape
can be found here:
https://github.com/landreman/stellopt_scenarios/tree/master/1DOF_circularCrossSection_varyR0_targetVolume
"""

# Start with a default surface, which is axisymmetric with major
# radius 1 and minor radius 0.1.
equil = Vmec()
surf = equil.boundary

# Set the initial boundary shape:
surf.set('rc(0,0)', 1.0)

surf.set('rc(0,1)', 0.1)
surf.set('zs(0,1)', 0.1)

surf.set('rc(1,0)', 0.1)
surf.set('zs(1,0)', 0.1)

# Parameters are all fixed by default, meaning they will not be
# optimized.  You can choose any subset of the Parameters to be part
# of the space of independent variables by setting their 'fixed'
# property to False.
surf.all_fixed()
surf.set_fixed('rc(0,0)', False)

# Each Target is then equipped with a shift and weight, to become a
# term in a least-squares objective function
desired_volume = 0.15
term1 = LeastSquaresTerm(equil.volume, desired_volume, 1)

# A list of terms are combined to form a nonlinear-least-squares
# problem.
prob = LeastSquaresProblem([term1])

# Solve the minimization problem:
prob.solve()

print("At the optimum,")
print(" rc(m=0,n=0) = ", surf.get_rc(0, 0))
print(" volume, according to VMEC    = ", equil.volume())
print(" volume, according to Surface = ", surf.volume())
print(" objective function = ", prob.objective)

assert np.abs(surf.get_rc(0, 0) - 0.7599088773175) < 1.0e-5
assert np.abs(equil.volume() - 0.15) < 1.0e-6
assert np.abs(surf.volume() - 0.15) < 1.0e-6
assert prob.objective < 1.0e-15
