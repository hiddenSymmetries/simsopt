# First stage
# ===================================
FROM ubuntu:20.04 as intermediate

RUN apt update && \
    DEBIAN_FRONTEND=noninteractive  apt-get install -y  build-essential gfortran git m4 wget cmake \
    libopenblas-dev libfftw3-dev libhdf5-dev libhdf5-serial-dev libnetcdf-dev libnetcdff-dev libgl1-mesa-dev \
    python3-dev python3-pip python3-venv

# Install mpich manually
WORKDIR /src
ARG mpich=3.3
ARG mpich_prefix=mpich-$mpich
ARG NPROC=$(expr `nproc` \* 2)

RUN \
    wget https://www.mpich.org/static/downloads/$mpich/$mpich_prefix.tar.gz && \
    tar xvzf $mpich_prefix.tar.gz   && \
    cd $mpich_prefix                && \
    ./configure                     && \
    make -j $NPROC                  && \
    make install                    && \
    make clean                      && \
    cd ..                           && \
    rm -rf $mpich_prefix


RUN /sbin/ldconfig

# RUN mkdir -p /src

RUN \
    git clone --depth 1 https://github.com/Reference-ScaLAPACK/scalapack.git /src/scalapack && \
    cd /src/scalapack && \
    CC=mpicc F77=mpif77 FC=mpif90 CXX=mpicxx cmake -DBUILD_SHARED_LIBS=ON -S . -B build && \
    cd build && \
    make -j $NPROC && \
    cmake --install . && \
    cd ../..  && \
    rm -rf scalapack
     
RUN /sbin/ldconfig

RUN python3 -m pip install wheel
RUN python3 -m venv /venv/

RUN /venv/bin/pip install -U pip
RUN /venv/bin/python -m pip install numpy scipy jax jaxlib f90nml mpi4py jupyter notebook ipython qsc sympy scikit-build ninja "pybind11[global]" cmake
RUN /venv/bin/pip install git+https://github.com/zhucaoxiang/f90wrap
ENV PATH="/venv/bin:${PATH}"

RUN git clone --depth 1 https://github.com/PrincetonUniversity/SPEC.git /src/SPEC && \
    cd /src/SPEC   &&  \
    /venv/bin/python setup.py bdist_wheel && \
    /venv/bin/pip install -v dist/*.whl

RUN git clone --depth 1 https://github.com/hiddenSymmetries/VMEC2000.git /src/VMEC && \
    cd /src/VMEC && \
    cp cmake/machines/ubuntu.json cmake_config_file.json && \
    /venv/bin/pip install  .

RUN /venv/bin/pip install h5py pyoculus py_spec
RUN /venv/bin/pip install vtk==9.0.1 pyqt5 matplotlib pyevtk plotly
RUN /venv/bin/pip install mayavi
RUN /venv/bin/pip install  git+https://github.com/hiddenSymmetries/booz_xform

ENV CI=True
RUN git clone --recurse-submodules https://github.com/hiddenSymmetries/simsopt.git /src/simsopt && \
    cd /src/simsopt && \
    git fetch --tags --all && \
    /venv/bin/pip install  -v .


# Second stage
# ===================================
FROM ubuntu:20.04

LABEL maintainer.name="Bharat Medasani" \
      maintainer.email="mbkumar.at.gmail" \
      developers="Hidden Symmetries Team" \
      version="0.07" \
      description="Docker file for simsopt container based on ubuntu image" 

RUN apt update && DEBIAN_FRONTEND=noninteractive  apt-get install -y  python3-dev python3-virtualenv   libnetcdf-dev libnetcdff-dev libopenblas-dev libscalapack-mpich-dev  libhdf5-serial-dev m4 libfftw3-dev libgl1-mesa-dev libopenblas-dev vim emacs nano git

COPY --from=intermediate /venv /venv
COPY --from=intermediate /opt /opt
COPY entrypoint.sh /venv/bin

#env PATH=$PATH:/venv/bin
# ENV OMPI_ALLOW_RUN_AS_ROOT=1 OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
ENTRYPOINT ["bash", "/venv/bin/entrypoint.sh"]
CMD ["bash"]
