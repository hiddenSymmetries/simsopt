# This file is based on examples in
# https://docs.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions

# Note that all the "sudo" commands here appear to cause a warning message
# "sudo: setrlimit(RLIMIT_CORE): operation not permitted"
# This appears to be a known harmless annoyance:
# https://gitlab.alpinelinux.org/alpine/aports/-/issues/11122

name: CI

on: [push, pull_request]

jobs:
  CI:
    runs-on: ubuntu-18.04

    env:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8]

    steps:
    # First print out lots of information. We do this in separate 
    # "name" blocks because otherwise the output gets mixed together
    # in the github actions log.
    
    - name: Print user and group id
      run: |
        set -ex
        id

    - name: PWD
      run: |
        set -ex
        pwd

    - name: ls -l
      run: |
        set -ex
        ls -l

    - name: apt-get stuff needed for libstell and vmec
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran openmpi-bin libopenmpi-dev libnetcdf-dev libnetcdff-dev liblapack-dev libblacs-mpi-dev libscalapack-mpi-dev libhdf5-openmpi-dev git m4 libfftw3-dev

    - uses: actions/checkout@v2
      # If we want submodules downloaded, uncomment the next 2 lines:
      #with:
      #  submodules: true

    # We must run actions/checkout@v2 before downloading and building VMEC, since checkout deletes the contents of the directory.
    # For now we use the mattland fork of VMEC. Once changes are pushed to mbkumar's fork, we can use that instead.
    - name: Download the VMEC2000 standalone repository
      run: git clone https://gitlab.com/mattland/VMEC2000.git

    - name: ls -l again
      run: |
        set -ex
        ls -l
        pwd

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: which python3 after python setup
      run: which python3

    - name: which pip after python setup
      run: pip --version

    - name: env after adding python
      run: env

    - name: Install python dependencies
      run: |
        pip install wheel numpy scipy jax jaxlib cmake scikit-build ninja f90nml h5py

    - name: Install booz_xform
      run: pip install -v git+https://github.com/hiddenSymmetries/booz_xform

    # Checking out SPEC is a tricky because it is a private repository.
    # See https://github.community/t/best-way-to-clone-a-private-repo-during-script-run-of-private-github-action/16116/7
    # https://stackoverflow.com/questions/57612428/cloning-private-github-repository-within-organisation-in-actions
    # https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token
    - name: Check out SPEC
      uses: actions/checkout@v2
      with:
        repository: PrincetonUniversity/SPEC
        path: SPEC
        token: ${{ secrets.SPEC_CHECKOUT }}
     
    - name: ls -l again
      run: |
        ls -l
        pwd

    - name: ls -l inside SPEC
      run: |
        cd SPEC
        pwd
        ls -l

    # For some reason, installing py_spec does not install the dependencies f90nml and h5py. Therefore I installed these manually above.
    - name: Install py_spec
      run: |
        pip install -e SPEC/Utilities/pythontools
        python -c "import py_spec; print('success')"

    - name: Build SPEC.
      run: |
        cd SPEC
        cat Makefile | sed 's/CC=intel/CC=gfortran_ubuntu/' > Makefile1
        cp Makefile1 Makefile
        head -n30 Makefile
        make -j

    - name: Add xspec to PATH.
      run: |
        cd SPEC
        ls -l
        echo "PATH=$PATH:/home/runner/work/simsopt/simsopt/SPEC" >> $GITHUB_ENV

    - name: Install f90wrap
      run: pip install git+https://github.com/jameskermode/f90wrap

    - name: ls in /usr/lib/x86_64-linux-gnu
      run: ls -l /usr/lib/x86_64-linux-gnu

    - name: Add to LD_LIBRARY_PATH so scalapack etc can be found
      run: echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

    - name: env after adding to LD_LIBRARY_PATH
      run: env

    - name: ls in VMEC2000/python 1
      run: ls -l VMEC2000/python

    - name: Configure VMEC2000 module
      run: |
        cd VMEC2000/python
        cp ubuntu.json cmake_config_file.json
        cat cmake_config_file.json

    - name: Build VMEC2000 module
      run: |
        cd VMEC2000/python
        python setup.py build_ext

    - name: Install VMEC2000 module
      run: |
        cd VMEC2000/python
        python setup.py install

    - name: ls in VMEC2000/python 2
      run: ls -l VMEC2000/python

    - name: Try importing vmec module
      run: python -c "print(dir()); import vmec; print(dir()); print(dir(vmec)); print('package:', vmec.__package__); print('spec:', vmec.__spec__); print('doc:', vmec.__doc__); print('file:', vmec.__file__); print('path:', vmec.__path__)"

    - name: Install mpi4py
      run: |
        pip install mpi4py

    - name: Install simsopt package
      run: |
        python3 setup.py build
        python3 setup.py develop

    - name: Run mpi unit tests
      run: ./run_tests_mpi

    - name: Run serial unit tests
      run: |
        cd tests/simsopt
        python3 -m unittest -v

    - name: Run 1dof integrated test
      run: |
        pwd
        cd examples
        python3 ./stellopt_scenarios_1DOF_circularCrossSection_varyR0_targetVolume

    - name: Run 1dof integrated test, 2 procs
      run: |
        pwd
        cd examples
        mpiexec -n 2 python3 ./stellopt_scenarios_1DOF_circularCrossSection_varyR0_targetVolume

    - name: Run test of Garabedian VMEC optimization, 1 proc
      run: |
        pwd
        cd examples
        mpiexec -n 1 python3 ./stellopt_scenarios_1DOF_circularCrossSection_varyAxis_targetIota

    - name: Run 2dof integrated test
      run: cd examples && python3 ./stellopt_scenarios_2DOF_vmecOnly_targetIotaAndVolume

    - name: Run 2dof integrated test, 2 procs
      run: cd examples && mpiexec -n 2 python3 ./stellopt_scenarios_2DOF_vmecOnly_targetIotaAndVolume
