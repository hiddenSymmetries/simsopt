# This file is based on examples in
# https://docs.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions

# Note that all the "sudo" commands here appear to cause a warning message
# "sudo: setrlimit(RLIMIT_CORE): operation not permitted"
# This appears to be a known harmless annoyance:
# https://gitlab.alpinelinux.org/alpine/aports/-/issues/11122

name: Extensive CI

on:
  push: 
    branches: [master]
    tags: [v*]
  pull_request:
    branches: [master]
  workflow_dispatch: 

jobs:
  test:
    runs-on: ubuntu-18.04

    env:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7.10, 3.8.10, 3.9.5] # To sync with coveragerc
        test-type: [unit, integrated]
        spec: [true, false]
        vmec: [true, false]

    steps:
    # First print out lots of information. We do this in separate 
    # "name" blocks because otherwise the output gets mixed together
    # in the github actions log.
    
    - name: Print user and group id
      run: |
        set -ex
        id

    - name: PWD
      run: |
        set -ex
        pwd

    - name: ls -l
      run: |
        set -ex
        ls -l

    - name: apt-get stuff needed for libstell and vmec
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran openmpi-bin libopenmpi-dev libnetcdf-dev libnetcdff-dev liblapack-dev libblacs-mpi-dev libscalapack-mpi-dev libhdf5-dev libhdf5-serial-dev git m4 libfftw3-dev

    - uses: actions/checkout@v2
      # If we want submodules downloaded, uncomment the next 2 lines:
      #with:
      #  submodules: true

    # We must run actions/checkout@v2 before downloading and building VMEC, since checkout deletes the contents of the directory.
    - name: Download the VMEC2000 standalone repository
      if: matrix.vmec == true
      run: git clone https://github.com/hiddensymmetries/VMEC2000.git

    - name: ls -l again
      run: |
        set -ex
        ls -l
        pwd

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: which python3 after python setup
      run: which python3

    - name: which pip after python setup
      run: |
        python -m pip install --upgrade pip
        pip --version

    - name: env after adding python
      run: env

    - name: Install python dependencies
      run: |
        #pip install wheel numpy scipy jax jaxlib cmake scikit-build ninja f90nml h5py pyoculus qsc sympy
        pip install wheel numpy f90nml scikit-build cmake qsc sympy
        # qsc is used for an integrated test.

    - name: Install booz_xform
      if: matrix.vmec == true 
      run: pip install -v git+https://github.com/hiddenSymmetries/booz_xform

    # Checking out SPEC is a tricky because it is a private repository.
    # See https://github.community/t/best-way-to-clone-a-private-repo-during-script-run-of-private-github-action/16116/7
    # https://stackoverflow.com/questions/57612428/cloning-private-github-repository-within-organisation-in-actions
    # https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token
    - name: Check out SPEC
      if: matrix.spec == true
      uses: actions/checkout@v2
      with:
        repository: PrincetonUniversity/SPEC
        path: SPEC
        token: ${{ secrets.SPEC_CHECKOUT }}
        #ref: python_hdf5
        # "ref" specifies the branch of the repository to use
     
    - name: ls -l again
      run: |
        ls -l
        pwd

    - name: ls -l inside SPEC
      if: matrix.spec == true
      run: |
        cd SPEC
        pwd
        ls -l

    # For some reason, installing py_spec does not install the dependencies f90nml and h5py. Therefore I installed these manually above.
    #- name: Install py_spec
    #  run: |
    #    pip install -e SPEC/Utilities/pythontools
    #    python -c "import py_spec; print('success')"

    - name: Build SPEC.
      if: matrix.spec == true
      run: |
        cd SPEC
        # In the SPEC Makefile, we need to set BUILD_ENV:
        cat Makefile | sed 's/BUILD_ENV?=intel/BUILD_ENV=gfortran_ubuntu/' > Makefile1
        # f90wrap gets confused by "-Wl,-rpath" so remove it:
        cat Makefile1 | sed 's&LINKS=-Wl,-rpath -Wl,/usr/lib/lapack -llapack -lblas&LINKS=-L/usr/lib/lapack -llapack -lblas&' > Makefile
        #cp Makefile1 Makefile
        head -n126 Makefile
        make -j

    - name: Add xspec to PATH.
      if: matrix.spec == true
      run: |
        cd SPEC
        ls -l
        echo "PATH=$PATH:/home/runner/work/simsopt/simsopt/SPEC" >> $GITHUB_ENV

    - name: Install f90wrap
      run: pip install -U git+https://github.com/zhucaoxiang/f90wrap

    - name: Build SPEC python wrapper.
      if: matrix.spec == true
      run: |
        cd SPEC/Utilities/python_wrapper
        make all

    - name: Add spec python wrapper to PYTHONPATH.
      if: matrix.spec == true
      run: echo "PYTHONPATH=$PYTHONPATH:/home/runner/work/simsopt/simsopt/SPEC/Utilities/python_wrapper" >> $GITHUB_ENV

    - name: Try import spec
      if: matrix.spec == true
      run: python -c "import spec; print(spec.constants.version)"

    - name: ls in /usr/lib/x86_64-linux-gnu
      run: ls -l /usr/lib/x86_64-linux-gnu

    - name: Add to LD_LIBRARY_PATH so scalapack etc can be found
      run: echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

    - name: env after adding to LD_LIBRARY_PATH
      run: env

    - name: ls in VMEC2000/python 1
      if: matrix.vmec == true
      run: ls -l VMEC2000/python

    - name: Configure VMEC2000 module
      if: matrix.vmec == true
      run: |
        cd VMEC2000
        cp cmake/machines/ubuntu.json cmake_config_file.json
        cat cmake_config_file.json
        pip install .

    - name: Try importing vmec module
      if: matrix.vmec == true
      run: python -c "print(dir()); import vmec; print(dir()); print(dir(vmec)); print('package:', vmec.__package__); print('spec:', vmec.__spec__); print('doc:', vmec.__doc__); print('file:', vmec.__file__); print('path:', vmec.__path__)"

    - name: Install simsopt package
      if: matrix.spec == true 
      run: pip install -v .[MPI,SPEC]

    - name: Install simsopt package
      if: matrix.spec == false && matrix.vmec == false
      run: pip install -v .

    - name: Install simsopt package
      if: matrix.spec == false && matrix.vmec == true
      run: pip install -v .[MPI]

    - name: Run serial examples as part of integrated tests
      if: contains(matrix.test-type, 'integrated')
      run: |
        cd examples
        ./run_serial_examples

    - name: Run spec examples as part of integrated tests
      if: contains(matrix.test-type, 'integrated') && matrix.spec == true 
      run: |
        cd examples
        ./run_spec_examples

    - name: Run vmec examples as part of integrated tests
      if: contains(matrix.test-type, 'integrated') && matrix.vmec == true 
      run: |
        cd examples
        ./run_vmec_examples

    - name: Run vmec and spec examples as part of integrated tests
      if: contains(matrix.test-type, 'integrated') && matrix.spec == true && matrix.vmec == true
      run: |
        cd examples
        ./run_spec_vmec_examples

    - name: Install coverage dependencies
      if: "contains(matrix.test-type, 'unit')"
      run: pip install coverage 

    - name: Run tests on 1 MPI process using coverage
      if: "contains(matrix.test-type, 'unit')"
      run: | 
        coverage run --source=simsopt -m unittest discover -s tests

    - name: Run MPI tests using coverage
      if: contains(matrix.test-type, 'unit') && (matrix.vmec == true || matrix.spec == true)
      run: | 
        mpiexec -n 1 coverage run -m unittest discover -k "mpi" -s tests
        mpiexec -n 2 coverage run -m unittest discover -k "mpi" -s tests
        mpiexec -n 3 coverage run -m unittest discover -k "mpi" -s tests

    - name: Upload uncombined coverage to github
      if: "contains(matrix.test-type, 'unit')"
      uses: actions/upload-artifact@v2
      with:
        name: gh-actions-parallel-coverage
        path: .coverage.*
        if-no-files-found: error

  coverage:
    runs-on: ubuntu-18.04
    needs: [ test ]
    steps:

    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.10

    - name: Install coverage
      run: pip install coverage

    - name: Checkout simsopt 
      uses: actions/checkout@v2

    - name: Install simsopt before running coverage
      run: pip install .

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: gh-actions-parallel-coverage
        path: ./

    - name: Display coverage files before combine 
      run: ls -a

    - name: Combine coverage reports
      run: | 
        coverage combine
        coverage report
        coverage xml

    - name: Upload coverage to github
      uses: actions/upload-artifact@v2
      with:
        name: tox-gh-actions-coverage
        path: coverage.xml
        if-no-files-found: error

    - name: Upload coverage to Codecov
      # The next line prevents github from trying to upload to Codecov on forks of the repository, avoiding a permissions error
      if: github.repository_owner == 'hiddenSymmetries'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        #files: ./coverage1.xml,./coverage2.xml
        #directory: ./coverage/reports/
        flags: unittests
        env_vars: PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        #path_to_write_report: ./coverage/codecov_report.gz
        verbose: true
