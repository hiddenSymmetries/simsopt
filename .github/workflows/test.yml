name: Tests

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        python-version: [3.7, 3.8, 3.9]
    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions tox-venv

    # Checking out SPEC is a tricky because it is a private repository.
    # See https://github.community/t/best-way-to-clone-a-private-repo-during-script-run-of-private-github-action/16116/7
    # https://stackoverflow.com/questions/57612428/cloning-private-github-repository-within-organisation-in-actions
    # https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token
    #- name: Check out SPEC
    #  uses: actions/checkout@v2
    #  with:
    #    repository: PrincetonUniversity/SPEC
    #    path: SPEC
    #    token: ${{ secrets.SPEC_CHECKOUT }}
     
    - name: ls -l again
      run: |
        ls -l
        pwd

    #- name: ls -l inside SPEC
    #  run: |
    #    cd SPEC
    #    pwd
    #    ls -l

    # For some reason, installing py_spec does not install its dependencies f90nml and h5py. Therefore I install these manually.
    #- name: Install py_spec
    #  run: |
    #    pip install f90nml h5py numpy
    #    pip install -e SPEC/Utilities/pythontools
    #    python -c "import py_spec; print('success')"

    - name: MPI required 
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran openmpi-bin libopenmpi-dev 
    - name: Test with tox
      run: tox
    - name: Upload coverage to github
      if: ${{ matrix.python-version == '3.8' }}
      uses: actions/upload-artifact@v2
      with:
        name: tox-gh-actions-coverage
        path: coverage.xml
        if-no-files-found: error
    - name: Upload coverage to Codecov
      if: ${{ matrix.python-version == '3.8' }}
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        files: ./coverage1.xml,./coverage2.xml
        directory: ./coverage/reports/
        flags: unittests
        env_vars: PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        path_to_write_report: ./coverage/codecov_report.gz
        verbose: true
