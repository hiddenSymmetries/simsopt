name: Wheel Builder

on: [push, pull_request]

jobs:
  linux_wheels:
    name: Build wheels on ubuntu
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build wheels
        uses: joerick/cibuildwheel@v1.9.0
        # to supply options, put them in 'env', like:
        env:
          # Only build for python 3.{7,8,9}
          CIBW_BUILD : cp37-* cp38-* cp39-*
          # Supports only x86_64 arch for linux
          CIBW_ARCHS_LINUX: x86_64
          # Use manylinux2014
          #CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_SKIP: cp27-*
          CIBW_DEPENDENCY_VERSIONS: latest
          CIBW_BEFORE_BUILD_LINUX: pip install --upgrade pip setuptools wheel numpy cmake ninja

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl


  # Alternate setup for mac_wheel because cibuildwheel is failing for mac
  mac_wheels:
    name: Build wheels on mac 
    runs-on: macos-10.15
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install wheel builder packages 
        run: python -m pip install --upgrade pip setuptools wheel delocate

      - name: Build and repair wheels
        run: |
          python -m pip wheel -w wheel --no-deps .
          delocate-wheel --require-archs x86_64 -w ./wheelhouse ./wheel/simsopt*.whl
         
      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Download all submodules
        run: git submodule update --init
        
      - name: Build sdist
        run: python setup.py sdist
        
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [linux_wheels, mac_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          #password: ${{ secrets.TEST_PYPI_TOKEN }}
          #repository_url: https://test.pypi.org/legacy/
